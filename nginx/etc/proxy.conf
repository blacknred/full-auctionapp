# The following mapping block declares a relationship between the
# public port the nginx-le container listens on (incoming request port)
# and the service name as given in the docker-compose.yml for your service container.
# To generate mappings from port ranges you may use the bash 
# script 'generate-mappings.sh', which can be found in the example folder.
map $server_port $internal_hostname {
    "443" "service1";
    "8443" "service2";
    default "localhost";
}

# The following mapping block declares a relationship between the
# public port the nginx-le container listens on (incoming request port)
# and the service internal port as given in the docker-compose.yml for your service container.
# To generate mappings from port ranges you may use the bash 
# script 'generate-mappings.sh', which can be found in the example folder.
map $server_port $internal_port {
    "443" "8000";
    "8443" "80";
    default "$server_port";
}

server {
    server_name reverseproxy;

    # must specify docker DNS as a resolver when use variables for proxy_pass
    resolver 127.0.0.11 ipv6=off; 

    # list all publically available ports
    listen 80;
    listen 443;   
    listen 8443;
    
    ssl                     on;
    ssl_certificate         SSL_CERT;
    ssl_certificate_key     SSL_KEY;
    ssl_trusted_certificate SSL_CHAIN_CERT;

    location / {
        proxy_set_header        Host $http_host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;

        # use the mapped hostname and port for a proxy target
        proxy_pass              "http://$internal_hostname:$internal_port";
    }


    add_header X-internal-hostname "$int_hostname";
    add_header X-internal-port "$int_port";
}






proxy_set_header Range "";
client_body_timeout 10s;
client_header_timeout 10s;
limit_req_zone $binary_remote_addr zone=iprlim:10m rate=10r/s;
limit_req_zone $cookie_sessionid zone=sessrlim:10m rate=10r/s;
limit_req_status 429;

proxy_cache_path /cache levels=1:2 keys_zone=cache1:10m max_size=5g inactive=10m use_temp_path=off;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream xmpp {
  ip_hash;
  server xmpp-service:4000 weight=3;
  server xmpp-service:4001 weight=2;
  server xmpp-service:4002 weight=1;
}
upstream app {
  server channel-service:3000;
}
upstream file {
  server file-service:5000;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name LE_FQDN;

    ssl_certificate SSL_CERT;
    ssl_certificate_key SSL_KEY;
    # ssl_trusted_certificate SSL_CHAIN_CERT;
    # ssl_stapling off;

    proxy_redirect off;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;

    add_header Application-Name secrets;
    add_header X-Cache-Status $upstream_cache_status;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

    limit_conn perip 10;
    limit_req zone=iprlim;
    # limit_req zone=sessrlim burst=20 nodelay;
    
    proxy_cache cache1;
    proxy_cache_min_uses 5;
    proxy_cache_revalidate on;
    proxy_cache_lock on;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_background_update on;
    proxy_cache_bypass $cookie_nocache $arg_nocache;
    proxy_cache_key $binary_remote_addr;

    # must specify docker DNS as a resolver when use variables for proxy_pass
    # resolver 127.0.0.11 ipv6=off; 

    location /api {
        proxy_pass http://app;
    }

    location /ws {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://xmpp;
    }

    location /file {
        proxy_pass http://file/$2;
    }

    location /files {
        # access_log off;
        gzip_static on;
        expires max;
        # add_header Cache-Control private;
        alias /files/;
    }

    location /health {
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    location / {
        if ($request_method != 'OPTIONS') {
            return 301 /api;
        }

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, OPTIONS';
        add_header 'Access-Control-Max-Age'        86400;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain; charset=UTF-8';
        return 204;
    }
}
